dge <- estimateDisp(dge, des)
?scran::computeSumFactors
??Rprintf
?computeSumFactors
?scran::computeSumFactors
?scater::normalize
getwd()
system.time()
?p.adjust
p.adjust.methods
?complete.cases
library(parallel)
??SnowParam
library(BiocParallel)
param <- SnowParam(workers = 4, type = "SOCK")
fun <- function(x, y = 1) {x + y}
bplapply(1:10, fun, BPPARAM = param)
bplapply(1:10, fun, y = 5, BPPARAM = param)
load("~/SVN/fischerlab/fischerlab/users/schwerin/scRNAseq_project/simulations/tryout/postDE2.RData")
names(resVec)
noCall <- resVec
noCall <- lapply(c(1:6, 10), function(x) x * 10000 / 100)
noCall
names(noCall) <- names(resVec)
bye
nrow(sce)
seq_along(noCall)
for (i in seq_along(noCall)) {
if (noCall[[i]] >= 0.1 * nrow(sce)) {
print(paste("Sorry", names(noCall)[i]))
}
}
confuse <- function(ranks, labels, FDRs, n = 1000) {
# prepare table
stopifnot(length(ranks) == length(labels) & length(ranks) == length(FDRs))
dt <- data.table(rank = ranks, label = labels, FDR = FDRs)
steps <- seq.int(2, nrow(dt), length.out = n)
dt <- dt[order(rank)]
# fill matrix with TPs, ...
m <- matrix(NA, n, 4, dimnames = list(steps, c("TP", "FP", "TN", "FN")))
for( s in seq_along(steps) ){
res <- dt[, .(TP = sum(rank < steps[s] & label != "random"),
FP = sum(rank < steps[s] & label == "random"),
TN = sum(rank >= steps[s] & label == "random"),
FN = sum(rank >= steps[s] & label != "random"))]
m[s, ] <- as.numeric(res[1, ])
}
return(list(confusionMatrix = m, predicted_FDR = dt[steps - 1, FDR]))
}
l <- lapply(names(resVec), function(m){
cm <- confuse(resVec[[m]]$rank, resVec[[m]]$label, resVec[[m]]$FDR)
data.table(
rec = cm[[1]][, 1] / (cm[[1]][, 1] + cm[[1]][, 4]),
fal = cm[[1]][, 2] / (cm[[1]][, 2] + cm[[1]][, 3]),
trueFDR = cm[[1]][, 2] / (cm[[1]][, 2] + cm[[1]][, 1]),
predFDR = cm[[2]],
method = m
)
})
library(data.table)
l <- lapply(names(resVec), function(m){
cm <- confuse(resVec[[m]]$rank, resVec[[m]]$label, resVec[[m]]$FDR)
data.table(
rec = cm[[1]][, 1] / (cm[[1]][, 1] + cm[[1]][, 4]),
fal = cm[[1]][, 2] / (cm[[1]][, 2] + cm[[1]][, 3]),
trueFDR = cm[[1]][, 2] / (cm[[1]][, 2] + cm[[1]][, 1]),
predFDR = cm[[2]],
method = m
)
})
roc <- do.call(rbind, l)
install.packages("flux")
x <- seq(0,1,0.1)
y <- 1 * x
flux::aux(x, y)
flux::auc(x, y)
y <- x^2
flux::auc(x, y)
auc(roc[[1]]$fal, roc[[1]]$rec)
flux::auc(roc[[1]]$fal, roc[[1]]$rec)
roc[[1]]$rec
roc
roc <- roc[complete.cases(roc), ]
roc
roc[, .list(AUC = flux::auc(fal, rec)), by = method]
roc[, .(AUC = flux::auc(fal, rec)), by = method]
aucs <- roc[, .(AUC = flux::auc(fal, rec)), by = method]
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC), stat = "identity") +
ggnice("Area Under ROC Curve")
ggplot(roc) +
geom_abline(slope = 1, intercept = 0, color = "black", alpha = 0.3, linetype = 2) +
geom_path(aes(x = fal, y = rec, col = method)) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
ggtitle("ROC")
aucs <- roc[, .(AUC = flux::auc(fal, rec)), by = method]
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC), stat = "identity") +
ggnice("Area Under ROC Curve")
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, color = method), stat = "identity") +
ggnice("Area Under ROC Curve")
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
ggnice("Area Under ROC Curve")
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggnice("Area Under ROC Curve")
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
theme(axis.text.x = element_text(angle = 180, hjust = 1)) +
ggnice("Area Under ROC Curve")
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
theme(axis.text.x = element_text(angle = 180, hjust = 1)) #+
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1, vjust = 1))
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1, vjust = 1))
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 2, hjust=1))
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 2))
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 0))
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
(aucs <- roc[, .(AUC = flux::auc(fal, rec)), by = method])
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
ggplot(roc) +
geom_abline(slope = 1, intercept = 0, color = "black", alpha = 0.3, linetype = 2) +
geom_path(aes(x = trueFDR, y = predFDR, col = method)) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
ggtitle("FDR")
dt <- roc[, .(trueFDR = trueFDR[which.min(abs(predFDR - 0.1))]), by = method]
ggplot(dt) +
geom_bar(aes(x = method, y = trueFDR), stat = "identity") +
geom_hline(yintercept = 0.1, color = "red", linetype = 2) +
ggnice("predicted FDR of 10%") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
ggplot(dt) +
geom_bar(aes(x = method, y = trueFDR, color = method), stat = "identity") +
geom_hline(yintercept = 0.1, color = "red", linetype = 2) +
ggnice("predicted FDR of 10%") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
ggplot(dt) +
geom_bar(aes(x = method, y = trueFDR, fill = method), stat = "identity") +
geom_hline(yintercept = 0.1, color = "red", linetype = 2) +
ggnice("predicted FDR of 10%") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
ggplot(dt) +
geom_bar(aes(x = method, y = trueFDR), stat = "identity") +
geom_hline(yintercept = 0.1, color = "red", linetype = 2) +
ggnice("predicted FDR of 10%") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
(dt <- roc[, .(trueFDR = trueFDR[which.min(abs(predFDR - 0.1))]), by = method])
(aucs <- roc[, .(AUC = flux::auc(fal, rec)), by = method])
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC, fill = method), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
for (i in seq_along(noCall)) {
if (noCall[[i]] >= 0.1 * nrow(sce)) {
print(paste("Sorry", names(noCall)[i]))
resVec[[names(noCall)[i]]] <- NULL
}
}
confuse <- function(ranks, labels, FDRs, n = 1000) {
# prepare table
stopifnot(length(ranks) == length(labels) & length(ranks) == length(FDRs))
dt <- data.table(rank = ranks, label = labels, FDR = FDRs)
steps <- seq.int(2, nrow(dt), length.out = n)
dt <- dt[order(rank)]
# fill matrix with TPs, ...
m <- matrix(NA, n, 4, dimnames = list(steps, c("TP", "FP", "TN", "FN")))
for( s in seq_along(steps) ){
res <- dt[, .(TP = sum(rank < steps[s] & label != "random"),
FP = sum(rank < steps[s] & label == "random"),
TN = sum(rank >= steps[s] & label == "random"),
FN = sum(rank >= steps[s] & label != "random"))]
m[s, ] <- as.numeric(res[1, ])
}
return(list(confusionMatrix = m, predicted_FDR = dt[steps - 1, FDR]))
}
l <- lapply(names(resVec), function(m){
cm <- confuse(resVec[[m]]$rank, resVec[[m]]$label, resVec[[m]]$FDR)
data.table(
rec = cm[[1]][, 1] / (cm[[1]][, 1] + cm[[1]][, 4]),
fal = cm[[1]][, 2] / (cm[[1]][, 2] + cm[[1]][, 3]),
trueFDR = cm[[1]][, 2] / (cm[[1]][, 2] + cm[[1]][, 1]),
predFDR = cm[[2]],
method = m
)
})
roc <- do.call(rbind, l)
ggplot(roc) +
geom_abline(slope = 1, intercept = 0, color = "black", alpha = 0.3, linetype = 2) +
geom_path(aes(x = fal, y = rec, col = method)) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
ggtitle("ROC")
(aucs <- roc[, .(AUC = flux::auc(fal, rec)), by = method])
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
ggplot(roc) +
geom_abline(slope = 1, intercept = 0, color = "black", alpha = 0.3, linetype = 2) +
geom_path(aes(x = trueFDR, y = predFDR, col = method)) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
ggtitle("FDR")
(dt <- roc[, .(trueFDR = trueFDR[which.min(abs(predFDR - 0.1))]), by = method])
ggplot(dt) +
geom_bar(aes(x = method, y = trueFDR), stat = "identity") +
geom_hline(yintercept = 0.1, color = "red", linetype = 2) +
ggnice("predicted FDR of 10%") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
l <- lapply(names(resVec), function(m){
res <- resVec[[m]][label %in% c("random", "shape"), ]
cm <- confuse(res$rank, res$label, res$FDR)
data.table(
rec = cm[[1]][, 1] / (cm[[1]][, 1] + cm[[1]][, 4]),
fal = cm[[1]][, 2] / (cm[[1]][, 2] + cm[[1]][, 3]),
trueFDR = cm[[1]][, 2] / (cm[[1]][, 2] + cm[[1]][, 1]),
predFDR = cm[[2]],
method = m
)
})
roc <- do.call(rbind, l)
ggplot(roc) +
geom_abline(slope = 1, intercept = 0, color = "black", alpha = 0.3, linetype = 2) +
geom_path(aes(x = fal, y = rec, col = method)) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
ggtitle("ROC - DS")
(aucs <- roc[, .(AUC = flux::auc(fal, rec)), by = method])
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
ggplot(roc) +
geom_abline(slope = 1, intercept = 0, color = "black", alpha = 0.3, linetype = 2) +
geom_path(aes(x = trueFDR, y = predFDR, col = method)) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
ggtitle("FDR - DS")
(dt <- roc[, .(trueFDR = trueFDR[which.min(abs(predFDR - 0.1))]), by = method])
ggplot(dt) +
geom_bar(aes(x = method, y = trueFDR), stat = "identity") +
geom_hline(yintercept = 0.1, color = "red", linetype = 2) +
ggnice("predicted FDR of 10%") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
l <- lapply(names(resVec), function(m){
res <- resVec[[m]][label %in% c("random", "both_a", "both_b"), ]
cm <- confuse(res$rank, res$label, res$FDR)
data.table(
rec = cm[[1]][, 1] / (cm[[1]][, 1] + cm[[1]][, 4]),
fal = cm[[1]][, 2] / (cm[[1]][, 2] + cm[[1]][, 3]),
trueFDR = cm[[1]][, 2] / (cm[[1]][, 2] + cm[[1]][, 1]),
predFDR = cm[[2]],
method = m
)
})
roc <- do.call(rbind, l)
ggplot(roc) +
geom_abline(slope = 1, intercept = 0, color = "black", alpha = 0.3, linetype = 2) +
geom_path(aes(x = fal, y = rec, col = method)) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
ggtitle("ROC - DB")
(aucs <- roc[, .(AUC = flux::auc(fal, rec)), by = method])
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
ggplot(roc) +
geom_abline(slope = 1, intercept = 0, color = "black", alpha = 0.3, linetype = 2) +
geom_path(aes(x = trueFDR, y = predFDR, col = method)) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
ggtitle("FDR - DB")
(dt <- roc[, .(trueFDR = trueFDR[which.min(abs(predFDR - 0.1))]), by = method])
ggplot(dt) +
geom_bar(aes(x = method, y = trueFDR), stat = "identity") +
geom_hline(yintercept = 0.1, color = "red", linetype = 2) +
ggnice("predicted FDR of 10%") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
l <- lapply(names(resVec), function(m){
res <- resVec[[m]][label %in% c("random", "mean"), ]
cm <- confuse(res$rank, res$label, res$FDR)
data.table(
rec = cm[[1]][, 1] / (cm[[1]][, 1] + cm[[1]][, 4]),
fal = cm[[1]][, 2] / (cm[[1]][, 2] + cm[[1]][, 3]),
trueFDR = cm[[1]][, 2] / (cm[[1]][, 2] + cm[[1]][, 1]),
predFDR = cm[[2]],
method = m
)
})
roc <- do.call(rbind, l)
ggplot(roc) +
geom_abline(slope = 1, intercept = 0, color = "black", alpha = 0.3, linetype = 2) +
geom_path(aes(x = fal, y = rec, col = method)) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
ggtitle("ROC - DM")
(aucs <- roc[, .(AUC = flux::auc(fal, rec)), by = method])
ggplot(aucs) +
geom_bar(aes(x = method, y = AUC), stat = "identity") +
ggnice("Area Under ROC Curve") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
ggplot(roc) +
geom_abline(slope = 1, intercept = 0, color = "black", alpha = 0.3, linetype = 2) +
geom_path(aes(x = trueFDR, y = predFDR, col = method)) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
ggtitle("FDR - DM")
(dt <- roc[, .(trueFDR = trueFDR[which.min(abs(predFDR - 0.1))]), by = method])
ggplot(dt) +
geom_bar(aes(x = method, y = trueFDR), stat = "identity") +
geom_hline(yintercept = 0.1, color = "red", linetype = 2) +
ggnice("predicted FDR of 10%") +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))
system.time(seq_along(vector("list", 10^3)))
system.time(1:length(vector("list", 10^3)))
system.time(1:length(vector("list", 10^4)))
system.time(1:length(vector("list", 10^6)))
system.time(1:length(vector("list", 10^7)))
system.time(seq_along(vector("list", 10^7)))
system.time(seq_along(vector("list", 10^7)))
system.time(seq_along(vector("list", 10^7)))
system.time(seq_along(vector("list", 10^7)))
system.time(seq_along(vector("list", 10^7)))
system.time(1:length(vector("list", 10^7)))
system.time(1:length(vector("list", 10^7)))
system.time(1:length(vector("list", 10^7)))
system.time(1:length(vector("list", 10^7)))
seq_along
?lrt
??lrt
?dnorm
??lrt
plot(pnorm(0,1))
plot(pnorm(100))
pnorm(2)
pnorm(1)
pnorm(1)
pnorm(0)
pnorm(-5:5)
plot(pnorm(-5:5))
plot(qnorm(-5:5))
qnorm(1)
qnorm(2)
qnorm(-1)
qnorm(0)
qnorm(0.5)
qnorm(0.2)
qnorm(0.1:0.9)
qnorm(seq(0.1,0.9, 0.1))
plot(qnorm(seq(0.1,0.9, 0.1)))
plot(qnorm(seq(0.1,0.9, 0.01)))
do.call(*, list(1,2,3))
do.call('*', list(1,2,3))
prod(c(1:3))
prod(c(1:2))
f <- function(x) prod(x)^(1/length(x))
x <- c(0.1, 0.5, 0.7)
f(x)
mean(x)
x <- c(0.4, 0.5, 0.6)
mean(x)
f(x)
x <- c(0.4, 0.5, 0.9)
mean(x)
f(x)
x <- c(0.4, 0.5, 0.9, 0.9)
x2 <- c(0.4, 0.4, 0.5, 0.5, 0.9, 0.9)
x1 <- c(0.4, 0.5, 0.9)
mean(x1)
mean(x2)
f(x1)
f(x2)
x1 <- c(0.1, 0.5, 0.9)
x2 <- c(0.1, 0.1, 0.5, 0.5, 0.9, 0.9)
mean(x1)
mean(x2)
f(x1)
f(x2)
x <- c(0.5)
m <- sapply(seq(0, 1, by = 0.1), function(i) mean(c(x, i)))
m
m <- sapply(seq(0, 1, by = 0.1), function(i) c(x, i))
m
plot(apply(m, 2, mean))
plot(apply(m, 2, f))
m <- sapply(seq(0, 1, by = 0.01), function(i) c(x, i))
plot(apply(m, 2, mean))
plot(apply(m, 2, f))
plot(apply(m, 2, prod))
?dpois()
dpois(1:10, 5)
plot(dpois(1:10, 5))
plot(dpois(1:100, 5))
plot(dpois(1:10, 5))
plot(rpois(1:10, 5))
hist(rpois(1:100, 5))
hist(rpois(100, 5))
hist(rpois(100, 5), breaks = 3)
hist(rpois(100, 5), breaks = 30)
hist(rpois(1000, 5), breaks = 30)
plot(dpois(1:10, 9))
hist(rpois(1000, 9), breaks = 30)
PoiBeta <- function(k, a, b, n = 100, d = 0) {
if (a<=0 || b<=0 || k<=0 || n<=0) {
stop("All parameters must be positive!")
}
#Check if we have vectors and that they are the same length
kLen <- length(k)
aLen <- length(a)
bLen <- length(b)
if ((kLen==1 && aLen==1 && bLen==1) ||
(kLen>1 && aLen==1 && bLen==1) ||
(kLen==1 && aLen>1 && bLen==1) ||
(kLen==1 && aLen==1 && bLen>1) ||
(kLen==bLen && aLen==bLen) ||
(kLen==bLen && aLen==1) ||
(kLen==aLen && bLen==1) ||
(kLen==1 && aLen==bLen))
{
m <- max(c(kLen, aLen, bLen))
x <- mat.or.vec(m, n)
if (kLen==1) k <- rep(k, m)
if (aLen==1) a <- rep(a, m)
if (bLen==1) b <- rep(b, m)
if (length(d) == 1) d <- rep(d, m)
# go through features
for (i in 1:m) {
#First generate Beta random variables
y <- rbeta(n, a[i], b[i])
#Then use for the Poisson intensities
x[i,] <- rpois(n, k[i]*y)
# add dropouts
Nz <- floor(d[i] * n) - sum(x[i,] == 0)
if( Nz > 0 ){
x[i, sample(which(x[i,] > 0), Nz)] <- 0
}
}
return(x)
} else {
stop("Array lengths of input parameters inconsistent!")
}
}
hist(PoiBeta(10, 2, 2, n = 1000), breaks = 30)
?rbeta
hist(rpois(1000, 10 * rbeta(1000, 2, 2)), breaks = 30)
hist(PoiBeta(10, 2, 2, n = 1000), breaks = 30)
hist(rpois(1000, 10 * rbeta(1000, 2, 2)), breaks = 30)
hist(dpois(seq(1, 15, 0.1), 10 * dbeta(seq(1, 15, 0.1), 2, 2)), breaks = 30)
warnigns(9)
warnigns()
warnings()
rbeta(10, 2, 2)
rbeta(10, 2, 2)
dbeta(1:10, 2, 2)
dbeta(seq(0,1,0.1), 2, 2)
dbeta(seq(0,1,length.out = 100), 2, 2)
dpois(seq(0,15, length.out = 100, 10 * dbeta(seq(0,1,length.out = 100), 2, 2))
dpois(seq(0,15, length.out = 100), 10 * dbeta(seq(0,1,length.out = 100), 2, 2))
warnings()
dpois(10, seq(1, 10))
rbeta(10, 2, 2)
dpois(1, 10 * rbeta(10, 2, 2))
dpois(1, 10 * 0.29)
dpois(1, c(1,2))
dpois(1, 1)
dpois(1, 2)
